// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @map("_id") @db.ObjectId
  username     String        @unique
  email        String        @unique
  address      Address?
  mangopayUser MangopayUser?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  degree       Degree?       @relation(fields: [degreeId], references: [id])
  degreeId     String?       @db.ObjectId
  biography    String?
  avatarUrl    String?
  firstName    String?
  lastName     String?
  nationality  String?
  birthDate    DateTime?
  country      String?
  ip           String?
  referralCode String?
  documents    Document[]
  reviews      Review[]
}

model Address {
  id       String @id @map("_id") @db.ObjectId
  address1 String
  address2 String
  city     String
  zip      String
  region   String
  country  String
  userId   String @unique @db.ObjectId
  user     User   @relation(fields: [userId], references: [id])
}

model MangopayUser {
  id                      String  @id @map("_id") @db.ObjectId
  userId                  String  @unique @db.ObjectId
  user                    User    @relation(fields: [userId], references: [id])
  kycId                   String  @unique
  kycLevel                String
  kycStatus               String
  kycRefusedReasonType    String?
  kycRefusedReasonMessage String?
  mangopayType            String
  mangopayWalletId        String  @unique
}

model University {
  id       String    @id @map("_id") @db.ObjectId
  name     String
  symbol   String
  url      String
  logoUrl  String
  schools  School[]
  subjects Subject[]
}

model School {
  id           String     @id @map("_id") @db.ObjectId
  name         String
  universityId String     @db.ObjectId
  university   University @relation(fields: [universityId], references: [id])
  degrees      Degree[]
}

model Degree {
  id         String    @id @map("_id") @db.ObjectId
  name       String
  schoolId   String    @db.ObjectId
  school     School    @relation(fields: [schoolId], references: [id])
  subjects   Subject[] @relation(fields: [subjectIds], references: [id])
  subjectIds String[]  @db.ObjectId
  users      User[]
}

model Subject {
  id           String     @id @map("_id") @db.ObjectId
  name         String
  degrees      Degree[]   @relation(fields: [degreeIds], references: [id])
  degreeIds    String[]   @db.ObjectId
  university   University @relation(fields: [universityId], references: [id])
  universityId String     @db.ObjectId
}

model Document {
  id          String   @id @map("_id") @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  name        String
  description String
  price       Int
  contentType String
  file        String
  fileName    String
  preview     String
  rating      Float
  reviews     Review[]
}

model Review {
  id         String   @id @map("_id") @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     String   @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  document   Document @relation(fields: [documentId], references: [id])
  documentId String   @db.ObjectId
  rating     Float
  comment    String
}
