// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                   String                @id @default(auto()) @map("_id") @db.ObjectId
  uid                  String                @unique
  username             String                @unique
  usernameChangedDate  DateTime?
  billing              Billing?
  mangopayUser         MangopayUser?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  degree               Degree?               @relation(fields: [degreeId], references: [id])
  degreeId             String?               @db.ObjectId
  biography            String?
  avatarUrl            String?
  firstName            String?
  lastName             String?
  nationality          String?
  birthDate            DateTime?
  countryOfResidence   String?
  ip                   String?
  referralCode         String?
  documents            Document[]
  reviews              Review[]
  canUpload            Boolean               @default(false)
  canBuy               Boolean               @default(false)
  website              String?
  phone                String?
  publicEmail          String?
  instagram            String?
  isAcademy            Boolean?              @default(false)
  isProfessor          Boolean               @default(false)
  publicAddress        String?
  brevoId              String?
  transactions         Transaction[]
  documentTransactions DocumentTransaction[]
}

model Billing {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  firstName  String
  lastName   String
  address1   String
  address2   String?
  city       String
  postalCode String
  region     String
  country    String
  userId     String  @unique @db.ObjectId
  user       User    @relation(fields: [userId], references: [id])
}

model MangopayUser {
  id                      String  @id @default(auto()) @map("_id") @db.ObjectId
  kycId                   String?
  kycLevel                String
  kycRefusedReasonMessage String?
  kycRefusedReasonType    String?
  kycStatus               String?
  mangopayId              String  @unique
  user                    User    @relation(fields: [userId], references: [id])
  userId                  String  @unique @db.ObjectId
  userType                String
  walletId                String  @unique
}

model University {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  symbol   String
  url      String
  logoUrl  String
  schools  School[]
  subjects Subject[]
}

model School {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  universityId String     @db.ObjectId
  university   University @relation(fields: [universityId], references: [id])
  degrees      Degree[]
}

model Degree {
  id       String            @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  schoolId String            @db.ObjectId
  school   School            @relation(fields: [schoolId], references: [id])
  users    User[]
  subjects SubjectWithYear[]
}

model SubjectWithYear {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  degree    Degree  @relation(fields: [degreeId], references: [id])
  degreeId  String  @db.ObjectId
  subject   Subject @relation(fields: [subjectId], references: [id])
  subjectId String  @db.ObjectId
  year      Int
}

model Subject {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  university       University        @relation(fields: [universityId], references: [id])
  universityId     String            @db.ObjectId
  code             String
  subjectsWithYear SubjectWithYear[]
  documents        Document[]
}

model Document {
  id                   String                @id @default(auto()) @map("_id") @db.ObjectId
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  userId               String                @db.ObjectId
  user                 User                  @relation(fields: [userId], references: [id])
  title                String
  description          String
  price                Float
  contentType          String
  originalFilePath     String
  enhancedFilePath     String?
  previewPdfUrl        String?
  previewImageUrl      String?
  ratingSum            Int?
  ratingCount          Int?
  reviews              Review[]
  documentType         DocumentType          @relation(fields: [documentTypeId], references: [id])
  documentTypeId       String                @db.ObjectId
  year                 Int?
  calification         Float?
  professor            String?
  byHand               Boolean
  subject              Subject               @relation(fields: [subjectId], references: [id])
  subjectId            String                @db.ObjectId
  documentTransactions DocumentTransaction[]
  extension            String
}

model Review {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     String   @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  document   Document @relation(fields: [documentId], references: [id])
  documentId String   @db.ObjectId
  rating     Int
  comment    String
}

model DocumentType {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String     @unique
  documents Document[]
}

model DocumentTransaction {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  document      Document    @relation(fields: [documentId], references: [id])
  documentId    String      @db.ObjectId
  user          User        @relation(fields: [userId], references: [id])
  userId        String      @db.ObjectId
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId String      @db.ObjectId
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  price         Float
  success       Boolean
}

model Transaction {
  id                   String                @id @default(auto()) @map("_id") @db.ObjectId
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  userId               String                @db.ObjectId
  user                 User                  @relation(fields: [userId], references: [id])
  transactionId        String                @unique
  status               String
  documentTransactions DocumentTransaction[]
}
